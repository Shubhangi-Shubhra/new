#%RAML 1.0
title: E-Commerce Platform API
version: v1
baseUri: http://localhost/api
protocols: [ HTTP ]
mediaType: application/json

securitySchemes:
  oauth_2_0:
    description: Use OAuth 2.0 for user authentication
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: Bearer token for OAuth 2.0 authentication
          type: string
      responses:
        401:
          description: Unauthorized â€“ Invalid or missing token
    settings:
      authorizationGrants: [ authorization_code, password, client_credentials ]
      accessTokenUri: https://auth.example.com/token
      authorizationUri: https://auth.example.com/authorize

securedBy: [ oauth_2_0 ]

/products:
  get:
    description: Get a list of products with filtering and pagination
    queryParameters:
      category:
        description: Filter by category
        type: string
        required: false
      minPrice:
        description: Minimum price
        type: number
        required: false
      maxPrice:
        description: Maximum price
        type: number
        required: false
      available:
        description: Filter by availability (true/false)
        type: boolean
        required: false
      page:
        description: Page number for pagination
        type: integer
        default: 1
      pageSize:
        description: Number of items per page
        type: integer
        default: 10
    responses:
      200:
        body:
          application/json:
            example:
              {
                "page": 1,
                "pageSize": 10,
                "total": 50,
                "data": [
                  { "id": "1", "name": "T-shirt", "price": 299, "available": true },
                  { "id": "2", "name": "Shoes", "price": 999, "available": true }
                ]
              }
  post:
    description: Create a new product (admin only)
    body:
      application/json:
        example:
          {
            "name": "Cap",
            "price": 149,
            "category": "clothing",
            "available": true
          }
    responses:
      201:
        body:
          application/json:
            example:
              {
                "id": "123",
                "name": "Cap",
                "price": 149,
                "category": "clothing",
                "available": true
              }

  /{productId}:
    get:
      description: Get a single product by ID
      responses:
        200:
          body:
            application/json:
              example:
                { "id": "1", "name": "T-shirt", "price": 299, "available": true }

/categories:
  get:
    description: Get list of product categories
    responses:
      200:
        body:
          application/json:
            example:
              [
                { "id": "clothing", "name": "Clothing" },
                { "id": "electronics", "name": "Electronics" }
              ]
  post:
    description: Create a new category (admin only)
    body:
      application/json:
        example:
          { "id": "toys", "name": "Toys" }
    responses:
      201:
        body:
          application/json:
            example:
              { "id": "toys", "name": "Toys" }

  /{categoryId}/products:
    get:
      description: Get products under a specific category
      queryParameters:
        page:
          type: integer
          default: 1
        pageSize:
          type: integer
          default: 10
      responses:
        200:
          body:
            application/json:
              example:
                {
                  "page": 1,
                  "pageSize": 10,
                  "total": 2,
                  "data": [
                    { "id": "1", "name": "T-shirt", "price": 299 },
                    { "id": "2", "name": "Cap", "price": 149 }
                  ]
                }

/users:
  post:
    description: Register a new user
    body:
      application/json:
        example:
          { "name": "Shubhangi", "email": "shub@example.com", "password": "pass123" }
    responses:
      201:
        body:
          application/json:
            example:
              { "id": "u1", "name": "Shubhangi", "email": "shub@example.com" }

  /{userId}/orders:
    get:
      description: Get all orders for a user (requires OAuth2)
      responses:
        200:
          body:
            application/json:
              example:
                [
                  { "id": "o1", "total": 499, "status": "placed" },
                  { "id": "o2", "total": 999, "status": "shipped" }
                ]
    post:
      description: Create a new order for a user
      body:
        application/json:
          example:
            { "items": [ { "productId": "1", "quantity": 2 } ] }
      responses:
        201:
          body:
            application/json:
              example:
                { "id": "o3", "status": "placed", "total": 598 }

/cart:
  get:
    description: Get current user's cart
    responses:
      200:
        body:
          application/json:
            example:
              { "items": [ { "productId": "1", "name": "T-shirt", "qty": 2 } ] }
  post:
    description: Add an item to the cart
    body:
      application/json:
        example:
          { "productId": "1", "qty": 2 }
    responses:
      201:
        body:
          application/json:
            example:
              { "productId": "1", "qty": 2 }
