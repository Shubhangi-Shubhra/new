#%RAML 1.0
title: Social Media API - POC 3
version: v1
baseUri: http://localhost:8081/api/{version}
mediaType: application/json

description: |
  A sample social media API with users, posts, comments, and likes.
  Includes filtering with query parameters and rate-limit headers.

/**
 * ---------- SECURITY ----------
 */
securitySchemes:
  oauth_2_0:
    description: OAuth 2.0 scheme for protected operations
    type: OAuth 2.0
    settings:
      authorizationUri: https://auth.example.com/authorize
      accessTokenUri: https://auth.example.com/token
      authorizationGrants: [ authorization_code, client_credentials ]

/**
 * ---------- FRAGMENTS ----------
 */
traits:
  rateLimited:
    description: Adds standard rate-limit headers
    headers:
      X-RateLimit-Limit:
        description: Max requests allowed per window
        type: integer
      X-RateLimit-Remaining:
        description: Remaining requests in current window
        type: integer
      X-RateLimit-Reset:
        description: UNIX timestamp when the rate limit resets
        type: integer

resourceTypes:
  collection:
    usage: Use for collection endpoints
    get:
      is: [ rateLimited ]
      queryParameters:
        limit:
          type: integer
          required: false
          default: 20
          description: Number of records to return
        offset:
          type: integer
          required: false
          default: 0
          description: Offset for pagination
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                count: integer
                items: any[]
    post:
      is: [ rateLimited ]
      securedBy: [ oauth_2_0 ]
      body:
        application/json:
          type: object
      responses:
        201:
          body:
            application/json:
              type: object

/**
 * ---------- TYPES ----------
 */
types:
  User:
    type: object
    properties:
      id: string
      username: string
      displayName?: string
      bio?: string
      followersCount?: integer
      followingCount?: integer
      createdAt: datetime
    example:
      id: "u_12345"
      username: "jdoe"
      displayName: "John Doe"
      bio: "Coffee & code"
      followersCount: 1200
      followingCount: 300
      createdAt: "2024-01-10T10:00:00Z"

  Post:
    type: object
    properties:
      id: string
      authorId: string
      content: string
      hashtags?: string[]
      mentions?: string[]
      attachments?: string[]
      likeCount?: integer
      commentCount?: integer
      createdAt: datetime
    example:
      id: "p_98765"
      authorId: "u_12345"
      content: "Loving the fall â€” #autumn #cozy"
      hashtags: ["autumn","cozy"]
      mentions: ["friend1"]
      likeCount: 10
      commentCount: 2
      createdAt: "2025-10-01T08:30:00Z"

  Comment:
    type: object
    properties:
      id: string
      postId: string
      authorId: string
      content: string
      createdAt: datetime
    example:
      id: "c_333"
      postId: "p_98765"
      authorId: "u_555"
      content: "Nice shot!"
      createdAt: "2025-10-01T09:00:00Z"

  Like:
    type: object
    properties:
      id: string
      postId: string
      userId: string
      createdAt: datetime
    example:
      id: "l_777"
      postId: "p_98765"
      userId: "u_12345"
      createdAt: "2025-10-01T09:05:00Z"

  Error:
    type: object
    properties:
      code: integer
      message: string

/**
 * ---------- RESOURCES ----------
 */

/health:
  get:
    description: Health check
    responses:
      200:
        body:
          application/json:
            example:
              status: ok
              time: "2025-10-31T00:00:00Z"

/users:
  type: collection
  get:
    description: Get all users
    queryParameters:
      username:
        description: Filter users by username
        type: string
        required: false
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              count: integer
              items: User[]
  post:
    description: Create a new user
    body:
      application/json:
        type: User
    responses:
      201:
        body:
          application/json:
            type: User

  /{userId}:
    uriParameters:
      userId: string
    get:
      description: Get user by ID
      responses:
        200:
          body:
            application/json:
              type: User
        404:
          body:
            application/json:
              type: Error

    /posts:
      type: collection
      get:
        description: Get posts created by user
        responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  count: integer
                  items: Post[]
      post:
        description: Create post for this user
        body:
          application/json:
            type: Post
        responses:
          201:
            body:
              application/json:
                type: Post

/posts:
  type: collection
  get:
    description: |
      List all posts.  
      Supports filtering using query parameters:
      - hashtags: Filter by hashtags
      - mentions: Filter by user mentions
    queryParameters:
      hashtags:
        type: string
        required: false
        example: "food,travel"
        description: "Filter posts with these hashtags (comma-separated)"
      mentions:
        type: string
        required: false
        example: "jdoe,friend1"
        description: "Filter posts mentioning these usernames"
      limit:
        type: integer
        default: 20
      offset:
        type: integer
        default: 0
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              count: integer
              items: Post[]
  post:
    description: Create new post
    securedBy: [ oauth_2_0 ]
    body:
      application/json:
        type: Post
    responses:
      201:
        body:
          application/json:
            type: Post

  /{postId}:
    uriParameters:
      postId: string
    get:
      description: Get a post by ID
      responses:
        200:
          body:
            application/json:
              type: Post
        404:
          body:
            application/json:
              type: Error
    put:
      description: Update a post
      securedBy: [ oauth_2_0 ]
      body:
        application/json:
          type: Post
      responses:
        200:
          body:
            application/json:
              type: Post
    delete:
      description: Delete a post
      securedBy: [ oauth_2_0 ]
      responses:
        204:
          description: Post deleted

    /comments:
      type: collection
      get:
        description: Get comments for a post
        responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  count: integer
                  items: Comment[]
      post:
        description: Add comment to post
        body:
          application/json:
            type: Comment
        responses:
          201:
            body:
              application/json:
                type: Comment

    /likes:
      post:
        description: Like a post
        securedBy: [ oauth_2_0 ]
        body:
          application/json:
            type: Like
        responses:
          201:
            body:
              application/json:
                type: Like
      delete:
        description: Remove like from post
        securedBy: [ oauth_2_0 ]
        responses:
          204:
            description: Like removed

/comments:
  type: collection
  get:
    description: Get all recent comments
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              count: integer
              items: Comment[]
  /{commentId}:
    uriParameters:
      commentId: string
    get:
      description: Get comment by ID
      responses:
        200:
          body:
            application/json:
              type: Comment

/likes:
  type: collection
  get:
    description: Get all likes globally
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              count: integer
              items: Like[]
